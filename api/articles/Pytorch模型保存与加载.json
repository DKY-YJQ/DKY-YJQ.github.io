{"title":"Pytorch模型保存与加载","slug":"Pytorch模型保存与加载","date":"2025-08-12T11:50:32.000Z","updated":"2025-08-12T12:22:20.158Z","comments":true,"path":"api/articles/Pytorch模型保存与加载.json","photos":[],"excerpt":null,"covers":null,"content":"<h1 id=\"Pytorch模型保存与加载\"><a href=\"#Pytorch模型保存与加载\" class=\"headerlink\" title=\"Pytorch模型保存与加载\"></a>Pytorch模型保存与加载</h1><h2 id=\"自定义一个卷积神经网络模型\"><a href=\"#自定义一个卷积神经网络模型\" class=\"headerlink\" title=\"自定义一个卷积神经网络模型\"></a>自定义一个卷积神经网络模型</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定义 CNN 模型</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Net</span>(nn.Module):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(Net, <span class=\"variable language_\">self</span>).__init__()</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.conv1 = nn.Sequential(</span><br><span class=\"line\">            nn.Conv2d(<span class=\"number\">1</span>, <span class=\"number\">10</span>, kernel_size=<span class=\"number\">5</span>),<span class=\"comment\"># 接收一个1通道灰度图像，使用10个5x5的卷积核进行特征提取，输出10个特征图</span></span><br><span class=\"line\">            nn.ReLU(),</span><br><span class=\"line\">            nn.MaxPool2d(kernel_size=<span class=\"number\">2</span>),</span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.conv2 = nn.Sequential(</span><br><span class=\"line\">            nn.Conv2d(<span class=\"number\">10</span>, <span class=\"number\">20</span>, kernel_size=<span class=\"number\">5</span>),</span><br><span class=\"line\">            nn.ReLU(),</span><br><span class=\"line\">            nn.MaxPool2d(kernel_size=<span class=\"number\">2</span>),</span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.fc = nn.Sequential(</span><br><span class=\"line\">            nn.Linear(<span class=\"number\">320</span>, <span class=\"number\">50</span>),<span class=\"comment\"># 320由计算而来</span></span><br><span class=\"line\">            nn.Linear(<span class=\"number\">50</span>, <span class=\"number\">10</span>),</span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">forward</span>(<span class=\"params\">self, x</span>):</span><br><span class=\"line\">        batch_size = x.size(<span class=\"number\">0</span>) <span class=\"comment\"># 此时x的结构：(batch_size,channels,width,height)</span></span><br><span class=\"line\">        x = <span class=\"variable language_\">self</span>.conv1(x)</span><br><span class=\"line\">        x = <span class=\"variable language_\">self</span>.conv2(x)</span><br><span class=\"line\">        x = x.view(batch_size, -<span class=\"number\">1</span>)</span><br><span class=\"line\">        x = <span class=\"variable language_\">self</span>.fc(x)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 实例化模型、损失函数和优化器</span></span><br><span class=\"line\">model = Net()</span><br><span class=\"line\">criterion = nn.CrossEntropyLoss() <span class=\"comment\"># 损失函数</span></span><br><span class=\"line\">optimizer = optim.SGD(model.parameters(), lr=learning_rate, momentum=momentum) <span class=\"comment\"># 优化器</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"保存模型至当前文件夹\"><a href=\"#保存模型至当前文件夹\" class=\"headerlink\" title=\"保存模型至当前文件夹\"></a>保存模型至当前文件夹</h2><blockquote>\n<p>torch.save()</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">save_model</span>(<span class=\"params\">model, path=<span class=\"string\">&#x27;model_mnist.pth&#x27;</span></span>):</span><br><span class=\"line\">    torch.save(model.state_dict(), path)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;模型已保存到 <span class=\"subst\">&#123;path&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"从文件夹中加载模型\"><a href=\"#从文件夹中加载模型\" class=\"headerlink\" title=\"从文件夹中加载模型\"></a>从文件夹中加载模型</h2><blockquote>\n<p>torch.load()</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">load_model</span>(<span class=\"params\">model, path=<span class=\"string\">&#x27;model_mnist.pth&#x27;</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> os.path.exists(path):</span><br><span class=\"line\">        model.load_state_dict(torch.load(path))</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;模型已从 <span class=\"subst\">&#123;path&#125;</span> 加载&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;未找到模型文件 <span class=\"subst\">&#123;path&#125;</span>&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> model</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"关于-pt和-pth\"><a href=\"#关于-pt和-pth\" class=\"headerlink\" title=\"关于.pt和.pth\"></a>关于.pt和.pth</h2><ul>\n<li>二者并无明显区别</li>\n<li>pt保存的是一个完整的模型，多用于发布、部署</li>\n<li>pth保存的是一个模型的权重，使用时需要先定义出一个模型，并让模型读取预设的权重</li>\n</ul>\n","categories":[],"tags":[]}